-- Ported from: https://github.com/preactjs/signals/blob/main/packages/core/test/signal.test.tsx
local signal = require("signals.signal")
local effect = require("signals.effect")
local computed = require("signals.computed")
local batch = require("signals.batch")
local untracked = require("signals.untracked")
local spy = require("luassert.spy")

describe("untracked()", function()
    it("should block tracking inside effects", function()
        local a = signal(1)
        local b = signal(2)
        local cb = spy.new(function()
            return a:get() + b:get()
        end)
        effect(function()
            untracked(cb)
        end)
        assert.spy(cb).was.called(1)
        a:set(10)
        b:set(20)
        assert.spy(cb).was.called(1)
    end)

    it("should block tracking even when run inside effect run inside untracked", function()
        local s = signal(1)
        local cb = spy.new(function()
            s:get()
        end)
        untracked(function()
            effect(function()
                untracked(cb)
            end)
        end)
        assert.spy(cb).was.called(1)
        s:set(2)
        assert.spy(cb).was.called(1)
    end)

    it("should not cause signal assignments throw", function()
        local a = signal(1)
        local b = signal(0)
        effect(function()
            a:get()
            untracked(function()
                b:set(b:get() + 1)
            end)
        end)
        assert.has_not.error(function()
            a:set(2)
        end)
        assert.are.equal(b:get(), 2)
        a:set(3)
        assert.are.equal(b:get(), 3)
    end)

    it("should block tracking inside computed signals", function()
        local a = signal(1)
        local b = signal(2)
        local cb = spy.new(function()
            return a:get() + b:get()
        end)
        local c = computed(function()
            return untracked(cb)
        end)
        assert.spy(cb).was_not_called()
        assert.are.equal(c:get(), 3)
        a:set(10)
        c:get()
        b:set(20)
        c:get()
        assert.spy(cb).was.called(1)
        assert.are.equal(c:get(), 3)
    end)
end)
