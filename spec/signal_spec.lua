-- Ported from: https://github.com/preactjs/signals/blob/main/packages/core/test/signal.test.tsx
local signal = require("signals.signal")
local effect = require("signals.effect")
local computed = require("signals.computed")
local spy = require("luassert.spy")

describe("signal()", function()
    it("should return a value", function()
        local v = { 1, 2 }
        local s = signal(v)
        assert.are.equal(s:get(), v)
    end)

    describe(":peek()", function()
        it("should get value", function()
            local s = signal(1)
            assert.are.equal(s:peek(), 1)
        end)

        it("should get the updated value after a value change", function()
            local s = signal(1)
            s:set(2)
            assert.are.equal(s:peek(), 2)
        end)

        it("should not make surrounding effect depend on the signal", function()
            local s = signal(1)
            local cb = spy.new(function()
                s:peek()
            end)
            effect(cb)
            assert.spy(cb).was.called(1)
            s:set(2)
            assert.spy(cb).was.called(1)
        end)

        it("should not make surrounding computed depend on the signal", function()
            local s = signal(1)
            local cb = spy.new(function()
                s:peek()
            end)
            local c = computed(cb)
            c:get()
            assert.spy(cb).was.called(1)
            s:set(2)
            c:get()
            assert.spy(cb).was.called(1)
        end)
    end)
end)
